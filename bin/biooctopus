#!/usr/bin/env ruby
#
# BioRuby bio-octopus Plugin
# Version 0.0.1
# Author:: Ben J Woodcroft
# Copyright:: 2011
# License:: The Ruby License
require 'rubygems'
require 'optparse'
require 'bio'
require 'bio-octopus'

USAGE = "This scripts reads a fasta file in, and uses the BLOCTOPUS and SPOCTOPUS scripts, returning a structured result for each transmembrane domain. Requires the scripts and a legacy BLAST formated database to be installed before use. They are available from http://octopus.cbr.su.se/"

if $0 == __FILE__
  o = OptionParser.new do |opts|
    indent = '    '
    opts.banner = [
      "Usage: biooctopus <FASTA_FILE> <BLASTDB>\n",
      USAGE
    ].flatten
  end
  o.parse!

  unless ARGV.length == 2
    puts o.help
    exit
  end

  fasta_path = ARGV[0]
  blastdb_path = ARGV[1]

  runner = Bio::Spoctopus::Wrapper.new

  Bio::FlatFile.auto(File.open(fasta_path)).each do |seq|
    result = runner.calculate(seq.seq, blastdb_path)
    name = seq.definition

    # Output singal peptide if it has one
    if result.signal?
      puts [
    		name,
    		'Signal peptide',
    		result.signal_peptide.start,
    		result.signal_peptide.stop
    	].join("\t")
    else
      puts [
    		name,
    		'No signal peptide found'
    	].join("\t")
    end

    if result.has_domain?
      # At least one TMD found. Output each on a separate line
      result.transmembrane_domains.each do |tmd|
        puts [
          name,
          result.transmembrane_type,
          tmd.start,
          tmd.stop,
          tmd.orientation
        ].join("\t")
      end
    else
      puts [
        name,
        'No transmembrane domain found'
      ].join("\t")
    end
  end
end
